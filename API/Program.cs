using API.Extensions;
using API.Helpers;
using API.Middleware;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// –†–µ—î—Å—Ç—Ä—É—î–º–æ DI
builder.Services.AddAutoMapper(typeof(MappingProfiles));
builder.Services.AddControllers();

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ DbContext (Sqlite)
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<StoreContext>(x => x.UseSqlite(connectionString));

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ ApplicationServicesExtensions
builder.Services.AddApplicationServices();

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ SwaggerServiceExtension
builder.Services.AddSwaggerDocumentation();

var app = builder.Build();

// üîπ –í–∏–∫–æ–Ω—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –ë–î –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var loggerFactory = services.GetRequiredService<ILoggerFactory>();
    try
    {
        var context = services.GetRequiredService<StoreContext>();
        await context.Database.MigrateAsync();
        await StoreContextSeed.SeedAsync(context, loggerFactory);
    }
    catch (Exception ex)
    {
        var logger = loggerFactory.CreateLogger<Program>();
        logger.LogError(ex, "An error occurred during migration");
    }
}

app.UseMiddleware<ExceptionMiddleware>();

//–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SwaggerServiceExtension
app.UseSwaggerDocumentation();

app.UseStatusCodePagesWithReExecute("/errors/{0}");

app.UseHttpsRedirection();
app.UseRouting();
app.UseStaticFiles();
app.UseAuthorization();
app.MapControllers();

app.Run();